{"version":3,"sources":["getWeb3.js","utils/context/userContext.js","components/navbar.js","pages/home.js","pages/shop.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","UserContext","React","createContext","MyProvider","props","updateContext","key","value","setState","prevState","state","isAuthorized","accounts","contract","noWallet","isSeller","isAdmin","isBuyer","Provider","this","children","Component","useStyles","makeStyles","theme","root","flexGrow","top","background","color","shop","subTitle","display","breakpoints","up","Navbar","useState","defaultAccount","setDefaultAccount","classes","useEffect","account","AppBar","className","position","Toolbar","Button","onClick","adminHandler","IconButton","Typography","variant","noWrap","substring","length","seller","buyer","toast","configure","itemData","img","title","Item","styled","Paper","typography","body2","padding","spacing","textAlign","palette","text","secondary","home","sellerEntersShop","context","methods","checkUser","call","from","response","history","push","addNewSeller","addUser","send","then","status","events","UserCreated","success","error","addNewBuyer","buyerEntersShop","resp","enterAsAdmin","storageValue","isLoading","bind","baseAppState","admin","Container","Grid","container","mt","item","xs","md","Box","sx","p","border","ImageList","width","height","cols","rowHeight","map","ImageListItem","src","srcSet","alt","loading","contextType","pinataApiKey","pinataSecretApiKey","componentDidMount","res","getNFTForSale","getPurchasedNFT","sellerAddressHandler","event","persist","sellerAddressToApprove","target","sellerAmountHandler","sellerAmount","goHome","approveSeller","preventDefault","assignAsSeller","result","SellerVerified","catch","creditSeller","withdrawAmount","utils","toWei","sendTo","Sent","handleNFTInput","name","uploadNFTForSale","addNFT","tokenId","tokenPrice","tokenCar","tokenModel","hashUrl","ForSale","mintNFT","metadata","filename","ipfsHash","filemodel","axios","post","maxContentLength","headers","pinata_api_key","pinata_secret_api_key","data","newMeta","IpfsHash","newMetaUrl","metaDataHash","metaDataHashUrl","sendHashToContract","awardItem","Minted","file","selectedFileName","nftToken","returnValues","_tokenId","handleFileInput","buyToken","sale","amount","price","purchaseNFT","Received","getPurchasedTokens","purchased","getCarForSale","sales","handleCapture","files","FormData","append","_boundary","current","sm","m","elevation","id","autoComplete","TextField","onChange","required","label","fullWidth","e","component","style","type","htmlFor","columns","index","Card","ml","marginRight","CardMedia","image","carUrl","CardContent","model","CardActions","size","class","token","App","on","location","reload","eth","getAccounts","net","getId","networkId","deployedNetwork","VintageShopContract","networks","instance","Contract","abi","address","adminSignin","alert","runExample","accountChangeHandler","getAdmin","localStorage","setItem","pageLoading","basename","Consumer","exact","path","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae36cd9e.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\n\nexport const UserContext = React.createContext();\n\nexport class MyProvider extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isAuthorized: false,\n            accounts: null,\n            web3: null,\n            contract: null,\n            noWallet: false,\n            isSeller: false,\n            isAdmin: false,\n            isBuyer: false\n        }\n    }\n\n    updateContext = (key, value)=>{\n        this.setState((prevState)=>(\n            {...prevState, [key]: value}\n        ));        \n    }\n\n    render(){\n        return(            \n            <UserContext.Provider\n                value={{state: this.state, updateContext: this.updateContext}}>\n                {this.props.children}\n            </UserContext.Provider>            \n        )\n    }\n}","import React, {useState, useEffect} from 'react'\n\nimport {AppBar, Typography, Toolbar, Button } from \"@material-ui/core\"\nimport { makeStyles} from \"@material-ui/core/styles\"\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport IconButton from '@material-ui/core/IconButton';\nimport Stack from '@material-ui/lab'\nimport { Alert, AlertTitle } from '@material-ui/lab';\n\n\nconst useStyles = makeStyles((theme) =>({\n    root:{\n        flexGrow: 1\n    },\n    top: {\n    background: '#282c34',\n      color: (props) => props.color,\n    },\n    shop:{\n        color: '#ffffff !important'\n    },\n    subTitle: {\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n          display: 'block',\n        },\n        fontSize: '14px'\n      },\n}))\n    \n   \n \n\nconst Navbar = (props) => {\n    const [defaultAccount, setDefaultAccount] = useState(null)\n    const [alert, setAlert] = useState(false)\n    const classes = useStyles(props);\n    useEffect(() => {\n        setDefaultAccount(props.account);\n        console.log('default account', props )\n\n      });\n    // const HandleConnect = () =>{\n    //     if(window.ethereum){\n    //         //metamask is installed\n    //         window.ethereum.request({method: 'eth_requestAccounts'})\n    //         .then(result =>{\n    //             accountChangeHandler(result[0]);\n                \n\n    //         })\n    //     }else{\n    //         setAlert(true);\n    //     }\n\n    // console.log(\"connect to metamask\")\n    // }\n\n\n    const alertChangeHandler = (stat) =>{\n        setAlert(stat)\n    }\n    const accountChangeHandler = (newAccount) =>{\n        setDefaultAccount(newAccount);\n        \n\n    }\n    const handleAdmin = () =>{\n        props.adminHandler()\n    }\n\n    const chainChangedHandler = () =>{\n        window.location.reload();\n    }\n    // window.ethereum.on('accountsChanged',accountChangeHandler);\n    \n    // window.ethereum.on('chainChanged',chainChangedHandler);\n\n    return (\n        \n        <div >\n        <AppBar className={classes.top} position=\"static\">\n            <Toolbar>\n                \n                    <Button\n                    color=\"inherit\"\n                     onClick = { () => handleAdmin()} className={classes.root}>\n                        ADMIN\n                    </Button>\n              \n            <IconButton className={classes.root}>\n                <AddShoppingCartIcon className={classes.shop}/>\n            </IconButton>\n            <Typography variant=\"h4\" className={classes.root}>\n                Vintage Shop\n            </Typography>\n            <div className={classes.root}>\n                 {/* {props.account} */}   \n                 \n            <Typography className={classes.subTitle} variant=\"h6\" noWrap>\n            Your Account:    \n            {defaultAccount === null\n            ? '-'\n            : defaultAccount\n            ? `${defaultAccount.substring(0, 6)}...${defaultAccount.substring(defaultAccount.length - 4)}`\n            : ''}\n            {/* {defaultAccount} */}\n            \n          </Typography> \n          {\n              props.seller ?\n              <Button\n              color=\"inherit\"\n                \n                className={classes.root}>\n                  Selller\n              </Button>\n               : \n              ''\n          }\n        {\n              props.buyer ?\n              <Button\n              color=\"inherit\"\n                \n                className={classes.root}>\n                  Buyer\n              </Button>\n               : \n              ''\n          }\n            \n            </div>\n            \n            </Toolbar>\n            {/* {\n                alert ? <Alert severity=\"warning\">\n                        <AlertTitle>Connection Error</AlertTitle>\n                        Please Install Metamask— <strong>check it out!</strong>\n\n                        </Alert> \n                : null\n            } */}\n        </AppBar>  \n        </div>\n    )\n}\nexport default Navbar;\n","import React, { Component } from 'react'\nimport Navbar from '../components/navbar';\nimport {styled, makeStyles} from '@material-ui/core/styles'\nimport {Redirect} from 'react-router-dom';\nimport ImageList from '@material-ui/core/ImageList'\nimport ImageListItem from '@material-ui/core/ImageListItem'\nimport getWeb3 from \"../getWeb3\";\nimport { Container, Grid, Paper, Button, Box, TextField, TextareaAutosize } from '@material-ui/core';\nimport { UserContext } from '../utils/context/userContext';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n  \ntoast.configure()\n\n\nconst itemData = [\n    {\n      img: 'https://images.pexels.com/photos/189454/pexels-photo-189454.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Breakfast',\n    },\n    {\n      img: 'https://images.pexels.com/photos/210156/pexels-photo-210156.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Burger',\n    },\n    {\n      img: 'https://images.pexels.com/photos/1974520/pexels-photo-1974520.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Camera',\n    },\n    {\n      img: 'https://images.pexels.com/photos/1008659/pexels-photo-1008659.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Coffee',\n    },\n    {\n      img: 'https://images.pexels.com/photos/1409990/pexels-photo-1409990.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Hats',\n    },\n    {\n      img: 'https://images.pexels.com/photos/627677/pexels-photo-627677.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940',\n      title: 'Honey',\n    },\n    \n  ];\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  }));\n\nexport class home extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            storageValue: 0, \n            web3: null, \n            accounts: null, \n            contract: null,\n            isAuthorized: false, \n            isAdmin: false,\n            isSeller: false,\n            isBuyer: false,\n            isLoading: false,\n            noWallet: false\n           };\n\n           this.sellerEntersShop = this.sellerEntersShop.bind(this);\n           this.buyerEntersShop = this.buyerEntersShop.bind(this);\n    }\n  \n    componentDidMount(){\n      if(this.props.baseAppState.isAdmin){\n        this.context.updateContext(\"isAdmin\", true);\n        this.setState({isAdmin: true});\n      }\n      this.context.updateContext(\"contract\" , this.props.baseAppState.contract);\n      this.context.updateContext(\"accounts\" , this.props.baseAppState.accounts);\n      console.log('homePropsNav',this.props)\n    }\n\n    sellerEntersShop = async () => {\n      console.log('go to shop')\n      this.context.updateContext(\"isSeller\" , true )\n      const contract = this.context.state.contract;\n      const account = this.context.state.accounts[0];\n      let response = await contract.methods.checkUser().call({from: account});\n      console.log('resp',response);\n        if(response && response === true){\n          this.props.history.push('/shop');\n        }else{\n         this.addNewSeller();\n        }\n     \n     \n    }\n\n    addNewSeller = () => {\n      const contract = this.context.state.contract;\n      const account = this.context.state.accounts[0];\n      console.log('add user');\n      let user = contract.methods.addUser(true).send({from: account});\n      user.then(response => {\n        if(response.status == true && response.events.UserCreated){\n          toast.success('User Created Successfully');\n          this.props.history.push('/shop');\n        }else{\n          toast.error('User Creation Error');\n          \n        }\n      })\n\n     \n    }\n\n    addNewBuyer = () => {\n      const contract = this.context.state.contract;\n      const account = this.context.state.accounts[0];\n      let user = contract.methods.addUser(false).send({from: account});\n      user.then( response =>{\n        if(response.status == true && response.events.UserCreated){\n          toast.success('User Created Successfully');\n          this.props.history.push('/shop');\n        }else{\n          toast.error('User Creation Error');\n          \n        }\n      }\n\n      )\n     \n    }\n    buyerEntersShop = async () => {\n      console.log('go to shop')\n      this.context.updateContext(\"isBuyer\" , true )\n      const contract = this.context.state.contract;\n      const account = this.context.state.accounts[0];\n      let resp = await contract.methods.checkUser().call({from: account});\n      console.log('resp',resp);\n      if(resp && resp === true){\n        this.props.history.push('/shop');\n      }else{\n       this.addNewBuyer();\n      }\n    \n    }\n    \n    enterAsAdmin = () =>{\n      this.context.updateContext(\"isAdmin\" , true )\n      this.props.history.push('/shop'); \n    }\n\n    static contextType = UserContext;\n\n    render() {\n       console.log('context',this.context) \n        console.log('homeNav',this.props)\n        // if(this.props.baseAppState.isAdmin){\n        //   this.context.updateContext(\"isAdmin\", true);\n        //   this.setState({isAdmin: true});\n        // }\n        return (\n            <div className=\"welcome\">\n              {/* <Navbar account={this.state.accounts ? this.state.accounts[0] : null}/> */}\n              <Navbar account={this.props.baseAppState.accounts[0]} adminHandler={this.enterAsAdmin} \n              admin={this.context.isAdmin}\n              seller={this.context.isSeller}\n              buyer={this.context.isBuyer}\n              />\n              <Container>\n              <Grid container spacing={2}>\n                <div className=\"container\">\n                    <h1 className=\"title\">Welcome To Vingtage Auto Sales Shop</h1>\n                </div>\n                <Grid mt={5} item xs={12} md={12}>\n                    <Item  className=\"\">Sign in as a buyer or a seller</Item> \n                </Grid>\n             \n                </Grid>\n                <Box mt={5} sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={3}>\n                        {/* <Item></Item> */}\n                        </Grid>\n                        <Grid item xs={3}>\n                        <Item>\n                            <Button onClick={this.sellerEntersShop} className=\"btn-vin\">Seller</Button>\n                        </Item>\n                        </Grid>\n                        <Grid item xs={3}>\n                        <Item>\n                        <Button onClick={this.buyerEntersShop}>Buyer</Button>\n                        </Item>\n                        </Grid>\n                        <Grid item xs={3}>\n                        {/* <Item></Item> */}\n                        </Grid>\n                       \n                    </Grid>\n                </Box>\n                <Box mt={5} sx={{ p:5 ,border: '2px solid white' }}>\n                    <ImageList mt={5} sx={{ width: 500, height: 450 }} cols={3} rowHeight={164}>\n                            {itemData.map((item) => (\n                                <ImageListItem key={item.img}>\n                                <img\n                                    src={`${item.img}?w=164&h=164&fit=crop&auto=format`}\n                                    srcSet={`${item.img}?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}\n                                    alt={item.title}\n                                    loading=\"lazy\"\n                                />\n                                </ImageListItem>\n                            ))}\n                        </ImageList>\n                  </Box>  \n              </Container>\n            </div>\n        )\n    }\n}\n\nexport default home\n","import React, { Component } from 'react'\nimport { Container, Grid, Paper, Button, Box, Typography, CardMedia, TextField, Card, CardContent, CardActions, TextareaAutosize } from '@material-ui/core';\nimport {styled, makeStyles} from '@material-ui/core/styles'\nimport Navbar from '../components/navbar';\nimport axios from 'axios'\nimport {Toast} from 'bootstrap'\nimport { UserContext } from '../utils/context/userContext';\nimport Web3 from 'web3'\nimport Alert from '@material-ui/lab/Alert';\nimport { withStyles } from '@material-ui/core/styles'\nimport AlertTitle from '@material-ui/lab/AlertTitle';\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n  \ntoast.configure()\n\nconst pinataApiKey = \"8cfcaf6f796621bddbfa\";\nconst pinataSecretApiKey = \"063909ea3088f6268a4567948f1124aa6ac7b49d5a614de652443444b778f4e0\";\n\nconst styles = theme => ({\n    root: {\n      backgroundColor: \"red\"\n    }\n  });\nconst Item = styled(Paper)(({ theme }) => ({\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  }));\n\nexport class shop extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            storageValue: 0, \n            web3: null, \n            accounts: null, \n            contract: null,\n            isAuthorized: false, \n            isLoading: false,\n            noWallet: false,\n            isAdmin: false,\n            isSeller: false,\n            isBuyer: false,\n            sellerAddressToApprove: '',\n            file: null,\n            selectedFileName:'',\n            ipfsHash:null,\n            nftToken: '',\n            metaDataHash: '',\n            metaDataHashUrl: '',\n            filename: '',\n            filemodel: '',\n            tokenId:'',\n            tokenCar:'',\n            tokenPrice:'',\n            tokenModel:'',\n            hashUrl:'',\n            sellerAmount:'',\n            sales: [],\n            purchased: []\n            \n        }\n        this.handleCapture = this.handleCapture.bind(this);\n        // this.handleFileInput = this.handleFileInput(this);\n    }\n\n   componentDidMount = async () => {\n        window.web3 = new Web3(window.ethereum);\n       const res =  await window.ethereum.enable();\n       console.log('res', res);\n       if(this.context.state.isBuyer === true){\n            this.getNFTForSale();\n            this.getPurchasedNFT();\n\n       }\n       \n   }\n\n   sellerAddressHandler =(event)=>{\n    event.persist();\n    this.setState({sellerAddressToApprove: event.target.value}); \n}\n\n  sellerAmountHandler =(event)=>{\n    event.persist();\n    this.setState({sellerAmount: event.target.value}); \n}\n    goHome = () => {\n        console.log('go to shop')\n        this.props.history.push('/');\n    }\n\n    enterAsAdmin = () =>{\n        this.context.updateContext(\"isAdmin\" , true )\n        this.props.history.push('/shop'); \n      }\n   \n  \n\n    approveSeller=(event)=>{\n        event.preventDefault();\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n\n        let response = contract.methods.assignAsSeller(this.state.sellerAddressToApprove).send({from: account});\n        response.then(result => {\n            console.log('seller approval: ', result);\n            if(result.status && result.events.SellerVerified){\n\n                 toast.success('Seller Verified Successfully');\n\n            }else{\n                toast.error('An Error Occured');\n          \n            }\n        }).catch(error=>{\n                toast.error('seller approval error:')\n                  console.log('seller approval error: ', error);\n           \n        }); \n    }\n\n    creditSeller = async (event)=>{\n        event.preventDefault();\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n        const web3 = new Web3(window.ethereum);\n        const withdrawAmount = web3.utils.toWei(this.state.sellerAmount,'ether');\n        let response = await contract.methods.sendTo(this.state.sellerAddressToApprove, withdrawAmount).send({from: account, value: withdrawAmount});\n            if(response.status && response.events.Sent){\n\n                toast.success('Seller Credited Successfully');\n\n            }else{\n                toast.error('An Error Occured');\n            \n            }\n       \n        // response.then(result => {\n        //     console.log('seller credit: ', result);\n        //     if(result.status && result.events.Sent){\n\n        //          toast.success('Seller Credited Successfully');\n\n        //     }else{\n        //         toast.error('An Error Occured');\n          \n        //     }\n        // }).catch(error=>{\n        //         toast.error('seller approval error:')\n        //           console.log('seller approval error: ', error);\n           \n        // }); \n    }\n\n    handleNFTInput =(event)=> {\n        // const target = event.target;\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        });\n\n    }\n\n    uploadNFTForSale = async (event)=>{\n        event.preventDefault();\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n        let response = contract.methods.addNFT(\n            this.state.tokenId,\n            this.state.tokenPrice,\n            this.state.tokenCar,\n            this.state.tokenModel,\n            this.state.hashUrl).send({from:account});\n            response.then( result =>{\n                if(result.status && result.events.ForSale){\n                    toast.success('NFT Uploaded Forsale Successfully');   \n                }else{\n                    toast.error('NFT Uploaded Failed');   \n\n                }\n            })\n\n    }\n\n    mintNFT = async (event) =>{\n        event.preventDefault();\n        const metadata = {\n            \"name\": this.state.filename,\n            \"hash\": this.state.ipfsHash,\n            \"model\": this.state.filemodel\n        }\n        \n                try{\n                   // make axios post request\n                    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n                    const response = await axios.post(url, metadata, {\n                        maxContentLength: \"Infinity\",\n                        headers: {\n                        pinata_api_key: pinataApiKey, \n                        pinata_secret_api_key: pinataSecretApiKey,\n                        },\n                    });  \n                    console.log('metaData', response.data);\n                    const newMeta = \"ipfs://\" + response.data.IpfsHash;\n                    const newMetaUrl = \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash;\n                    console.log('newHash', newMeta)\n                    this.setState({\n                        metaDataHash: newMeta,\n                        metaDataHashUrl: newMetaUrl\n                    })\n                    this.sendHashToContract()\n                } catch(error){\n                    console.log(error)\n                }\n\n    }\n\n    sendHashToContract= async ()=>{\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n        let response = contract.methods.awardItem(account, this.state.ipfsHash, this.state.metaDataHash).send({from: account});\n        response.then(result => {\n            console.log('NFT Minted: ', result);\n            if(result.status && result.events.Minted){\n\n                 toast.success('NFT Minted Successfully');\n                 this.setState({\n                    file: null,\n                    selectedFileName:'',\n                    ipfsHash:null,\n                    metaDataHash: '',\n                    filename: '',\n                    filemodel: '' ,\n                    nftToken: result.events.Minted.returnValues._tokenId\n                 })\n\n            }else{\n                toast.error('An Error Occured');\n          \n            }\n        }).catch(error=>{\n                toast.error('NFT mint error:')\n                  console.log('NFT mint error: ', error);\n           \n        }); \n    }\n\n    handleFileInput =(event)=> {\n        // const target = event.target;\n        const value = event.target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]: value\n        });\n\n    }\n    buyToken = async (sale) => {\n        const web3 = new Web3(window.ethereum);\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n        const amount = web3.utils.toWei(sale.price,'ether');\n        let response = await contract.methods.purchaseNFT(sale.tokenId).send({from: account,value: amount});\n  \n        console.log('sold',response)\n        if(response && response.events.Received){\n            toast.success('Transaction successful');\n            this.getPurchasedNFT();\n        }else{\n                toast.error('An Error Occured');\n\n        }\n    //    response.then(result => {\n    //        if(result && result.event.Received){\n    //             toast.success('Transaction successful');\n    //        }else{\n    //             toast.error('An Error Occured');\n    //        }\n    //    })\n        \n    }\n    getPurchasedNFT = () => {\n        const contract = this.context.state.contract;\n        const account = this.context.state.accounts[0];\n        let response = contract.methods.getPurchasedTokens(account).call({from: account});\n        response.then(result => {\n            console.log('bought', result);\n            this.setState({\n                purchased: result\n            })\n        })\n    }\n\n    getNFTForSale = () => {\n        \n            const contract = this.context.state.contract;\n            const account = this.context.state.accounts[0];\n            let response = contract.methods.getCarForSale().call({from: account});\n            response.then(result => {\n                console.log('sale',result)\n                this.setState({\n                    sales: result\n                })\n            })\n        \n        \n    }\n\n    handleCapture = async ({ target }) => {\n        // setSelectedFile(target.files[0]);\n        this.setState({\n            file: target.files[0],\n            selectedFileName: target.files[0].name\n        })\n        console.log('upload', this.state.file);\n        const data = new FormData();\n        data.append('file', target.files[0]);\n\n        try {\n            // make axios post request\n            const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n            const response = await axios.post(url, data, {\n                maxContentLength: \"Infinity\", \n                headers: {\n                  \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n                  pinata_api_key: pinataApiKey, \n                  pinata_secret_api_key: pinataSecretApiKey,\n                },\n              });\n             \n           \n            console.log('ipfs',response.data)\n            if(response.data.IpfsHash){\n                toast.success('File Uploaded to IPFS Sussccessfully');\n                this.setState({\n                    ipfsHash    : response.data.IpfsHash\n                });\n              \n                \n            }\n           \n\n            \n          } catch(error) {\n            console.log(error)\n          }\n        \n      };\n\n    \n\n      static contextType = UserContext;\n    render() {\n        console.log('context',this.context) \n        let current = this.context\n        if(current.state.isAdmin){\n            return (\n                <div className=\"welcome\">\n                <Navbar adminHandler={this.enterAsAdmin} account ={current.state.accounts[0]}\n                 admin={current.state.isAdmin}\n                 seller={current.state.isSeller}\n                 buyer={current.state.isBuyer}\n                  />\n                <Container>\n                <Grid container spacing={1}>\n                            <Grid item sm={3}>\n\n                            </Grid>\n                            <Grid item sm={6}>\n                                <Box m={4}>\n                                    <Paper elevation={2}>    \n                                        <Box p={3}> \n                                        <span className=\"card-title\">Approve Seller</span>\n                                        <section>\n                                        <form id=\"\" className=\"\" autoComplete=\"off\">\n                                                <section>\n                                                 \n                                                    \n                                                  \n                                                    <Box mt={2}>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={12} sm={12}>\n                                                                <TextField onChange={this.sellerAddressHandler} id=\"\" required={true} label=\"Address of seller to approve\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>                                                            \n                                                        </Grid>\n                                                    </Box>  \n                                                    \n                                                    \n                                                    <Box mt={2}>\n                                                        <Button onClick={(e) => this.approveSeller(e)}  variant=\"contained\" color=\"primary\" component=\"span\">\n                                                            Approve\n                                                        </Button>\n                                                        {/* {this.state.loading.approveSeller ? <Loader type={'spinningBubbles'} size={'small'} color={'#556cd6'} />: null}    */}\n                                                    </Box>                                                                                                     \n                                                </section>                                                \n                                            </form>\n                                        </section>\n                                        </Box>\n\n                                    </Paper>\n                                </Box>\n                            </Grid>\n                </Grid>\n                   <Grid container spacing={1}>\n                            <Grid item sm={3}>\n\n                            </Grid>\n                            <Grid item sm={6}>\n                                <Box m={4}>\n                                    <Paper elevation={2}>    \n                                        <Box p={3}> \n                                        <span className=\"card-title\">Credit Seller</span>\n                                        <section>\n                                        <form id=\"\" className=\"\" autoComplete=\"off\">\n                                                <section>\n                                                 \n                                                    \n                                                  \n                                                    <Box mt={2}>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={12} sm={12}>\n                                                                <TextField onChange={this.sellerAddressHandler} id=\"\" required={true} label=\"Address of seller to credit\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>                                                            \n                                                        </Grid>\n                                                    </Box> \n                                                    <Box mt={2}>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={12} sm={12}>\n                                                                <TextField onChange={this.sellerAmountHandler} id=\"\" required={true} label=\"Address Amount to Credit Seller\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>                                                            \n                                                        </Grid>\n                                                    </Box> \n                                                    \n                                                    \n                                                    <Box mt={2}>\n                                                        <Button onClick={(e) => this.creditSeller(e)}  variant=\"contained\" color=\"primary\" component=\"span\">\n                                                            Credit\n                                                        </Button>\n                                                        {/* {this.state.loading.approveSeller ? <Loader type={'spinningBubbles'} size={'small'} color={'#556cd6'} />: null}    */}\n                                                    </Box>                                                                                                     \n                                                </section>                                                \n                                            </form>\n                                        </section>\n                                        </Box>\n\n                                    </Paper>\n                                </Box>\n                            </Grid>\n                </Grid>\n\n                </Container>\n                </div>\n            )\n        }else if(current.state.isSeller){\n            return (\n                <div className=\"welcome\">\n                <Navbar adminHandler={this.enterAsAdmin} account ={current.state.accounts[0]} \n                admin={current.state.isAdmin}\n                seller={current.state.isSeller}\n                buyer={current.state.isBuyer}\n                 />\n                <Container>\n                    <Grid container spacing={1}>\n                        <Grid item sm={3}></Grid>\n                        <Grid item sm={6}>\n                        <Box m={4}>\n                                    <Paper elevation={2}>    \n                                        <Box p={3}> \n                                        <span className=\"card-title\">Upload File To IPfs Storage & Mint car as NFT</span>\n                                        <section>\n                                        <form id=\"\" className=\"\" autoComplete=\"off\">\n                                                <section>\n                                                    <input\n                                                        style={{ display: \"none\" }}\n                                                        id=\"contained-button-file\"\n                                                        onChange={this.handleCapture}\n                                                        type=\"file\"\n                                                    />\n                                                    <label htmlFor=\"contained-button-file\">\n                                                        <Button variant=\"contained\" color=\"primary\" component=\"span\">\n                                                        Select a File\n                                                        </Button>\n                                                    </label>\n                                                    <span>{this.state.selectedFileName}</span>\n                                                    \n                                                    <Box mt={2}>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={12} sm={12}>\n                                                                <TextField\n                                                                name=\"filename\"\n                                                                type=\"text\"\n                                                                onChange={this.handleFileInput}\n                                                                value={this.state.filename}\n                                                                 required={true} label=\"Name of car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>\n                                                            <Grid item mt={3} md={12} sm={12}>\n                                                                <TextField\n                                                                name=\"filemodel\"\n                                                                type=\"text\"\n                                                                onChange={this.handleFileInput} required={true} label=\"Model of Car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>                                                            \n                                                        </Grid>\n                                                    </Box>  \n                                                    \n                                                    \n                                                    <Box mt={2}>\n                                                        <Button\n                                                        onClick={(e) => this.mintNFT(e)}\n                                                         variant=\"contained\" color=\"primary\" component=\"span\">\n                                                            Mint NFT\n                                                        </Button>\n                                                       \n                                                        {/* {this.state.loading.approveSeller ? <Loader type={'spinningBubbles'} size={'small'} color={'#556cd6'} />: null}    */}\n                                                    </Box> \n                                                    <Box mt={2}>\n                                                        <p>\n                                                            Token ID:\n                                                        <span>{this.state.nftToken}</span>\n                                                        </p>\n                                                        <p>\n                                                            Token Url:\n                                                        <span>{this.state.metaDataHashUrl}</span>\n                                                        </p>\n                                                    \n                                                        </Box>                                                                                                    \n                                                </section>                                                \n                                            </form>\n                                        </section>\n                                        </Box>\n\n                                    </Paper>\n                                </Box>\n                        </Grid>\n                        <Grid item sm={3}></Grid>\n                    </Grid>\n                    <Grid container spacing={1}>\n                        <Grid item sm={3}></Grid>\n                        <Grid item sm={6}>\n                        <Box m={4}>\n                                    <Paper elevation={2}>    \n                                        <Box p={3}> \n                                        <span className=\"card-title\">Put NFT up for sale</span>\n                                        <section>\n                                        <form id=\"\" className=\"\" autoComplete=\"off\">\n                                                <section>\n                                             \n                                                    <Box mt={2}>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={12} sm={12}>\n                                                                <TextField \n                                                                 name=\"tokenId\"\n                                                                 type=\"text\"\n                                                                 onChange={this.handleNFTInput}\n                                                                 value={this.state.tokenId}\n                                                                 required={true} label=\"Token ID\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>\n                                                            <Grid item mt={3} md={12} sm={12}>\n                                                                <TextField \n                                                                name=\"tokenCar\"\n                                                                type=\"text\"\n                                                                onChange={this.handleNFTInput}\n                                                                value={this.state.tokenCar}\n                                                                required={true} label=\"Name of Car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>\n                                                            <Grid item mt={3} md={12} sm={12}>\n                                                                <TextField \n                                                                name=\"tokenPrice\"\n                                                                type=\"text\"\n                                                                onChange={this.handleNFTInput}\n                                                                value={this.state.tokenPrice}\n                                                                required={true} label=\"Price of Car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid> \n                                                            <Grid item mt={3} md={12} sm={12}>\n                                                                <TextField \n                                                                name=\"hashUrl\"\n                                                                type=\"text\"\n                                                                onChange={this.handleNFTInput}\n                                                                value={this.state.hashUrl}\n                                                                required={true} label=\"Url of Car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid> \n                                                            <Grid item mt={3} md={12} sm={12}>\n                                                                <TextField \n                                                                name=\"tokenModel\"\n                                                                type=\"text\"\n                                                                onChange={this.handleNFTInput}\n                                                                value={this.state.tokenModel}\n                                                                required={true} label=\"Model of Car\" variant=\"outlined\" fullWidth={true}/>\n                                                            </Grid>                                                            \n                                                        </Grid>\n                                                    </Box>  \n                                                    \n                                                    \n                                                    <Box mt={2}>\n                                                        <Button  \n                                                        onClick={(e) => this.uploadNFTForSale(e)}\n                                                        variant=\"contained\" color=\"primary\" component=\"span\">\n                                                            UPLOAD FOR SALE\n                                                        </Button>\n                                                        {/* {this.state.loading.approveSeller ? <Loader type={'spinningBubbles'} size={'small'} color={'#556cd6'} />: null}    */}\n                                                    </Box>                                                                                                     \n                                                </section>                                                \n                                            </form>\n                                        </section>\n                                        </Box>\n\n                                    </Paper>\n                                </Box>\n                        </Grid>\n                        <Grid item sm={3}></Grid>\n                    </Grid>\n                </Container>\n                </div>\n            )\n        }else if(current.state.isBuyer){\n            return (\n                <div className=\"welcome\">\n                    <Navbar adminHandler={this.enterAsAdmin} account ={current.state.accounts[0]} \n                    admin={current.state.isAdmin}\n                    seller={current.state.isSeller}\n                    buyer={current.state.isBuyer}\n                 />\n                 <Container>\n                 <h1 className=\"title\">Tokens Available For Sale</h1>\n                 <Grid container spacing={{ xs: 2, md: 3 }} columns={{ xs: 4, sm: 8, md: 12 }}>\n                    {this.state.sales.map((sale, index) => (\n                    <Grid item xs={2} sm={4} md={4} key={index}>\n                        <Card ml={3} style={{marginRight:'15px'}}>\n                            <CardMedia\n                                component=\"img\"\n                                height=\"100\"\n                                image={sale.carUrl}\n                                alt=\"green iguana\"\n                            />\n                            <CardContent>\n                                <Typography  variant=\"h5\" component=\"div\">\n                                NFT Name: {sale.name}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"secondary\">\n                                Car Model: {sale.model}\n                                </Typography>\n                                <Typography variant=\"body2\" color=\"secondary\">\n                                Price in Eth: {sale.price}\n                                </Typography>\n                            </CardContent>\n                            <CardActions>\n                                <Button onClick={() => this.buyToken(sale) } size=\"small\">BUY NOW</Button>\n                            </CardActions>\n                            </Card>\n                    </Grid>\n                    ))}\n                </Grid>\n                \n                 {/* <Grid container spacing={2}>\n                 \n                    <Box mt={5} sx={{ flexGrow: 1 }}>\n                        {\n                            this.state.sales.map((sale, i) => (\n                                <Grid mt={3} item xs={3}>\n                                <Card sx={{ minWidth: 275 }} key={i}>\n                                   <CardContent>\n                                       <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n                                       {sale.name}\n                                       </Typography>\n                                       <Typography variant=\"h5\" component=\"div\">\n                                       {sale.model}\n                                       </Typography>\n                                       <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n                                       {sale.price}\n                                       </Typography>\n                                       \n                                   </CardContent>\n                                   <CardActions>\n                                       <Button onClick={() => this.buyToken(sale) } size=\"small\">BUY NOW</Button>\n                                   </CardActions>\n                                   </Card>\n                               </Grid>\n                            ))\n                        }\n                        \n                    </Box>\n                 </Grid> */}\n                  <h6 className=\"title\">List of purchased Tokens</h6>\n                  {\n                      this.state.purchased.length === 0 ?\n                      <p class=\"text-white\"> You currently have no purchased Token </p>:\n                      ''\n                  }\n                  {this.state.purchased.map((token, index) => (\n                    <p class=\"text-white\" key={index}>Token ID:{token} </p>\n\n                  ))}\n                \n                 </Container>\n                {/* <p>this is the shop</p> */}\n                </div>\n            )\n        }else{\n            return (\n                <div className=\"welcome\">\n                <Container>\n                <Grid mt={5} item xs={12} md={12}>\n                    <Item  className=\"\">Welcome To Vingtage Auto Sales Shop Sign In as A Buyer or Seller  </Item> \n                </Grid>\n                </Container>\n                <Box mt={5} sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={5}>\n                        {/* <Item></Item> */}\n                        </Grid>\n                        <Grid item xs={2}>\n                        <Item>\n                            <Button onClick={this.goHome} className=\"btn-vin\">Home</Button>\n                        </Item>\n                        </Grid>\n                        <Grid item xs={5}>\n                       \n                        </Grid>\n                        \n                       \n                    </Grid>\n                </Box>\n                </div>\n            )\n        }\n    }    \n    \n}\n\nexport default shop;\n","import React, { Component } from \"react\";\nimport {BrowserRouter, Route, Switch, Redirect} from \"react-router-dom\";\n// import SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport VintageShopContract from \"./contracts/VintageShop.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {MyProvider, UserContext} from \"./utils/context/userContext\";\nimport {toast} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport \"./App.css\";\nimport Home from \"./pages/home\";\nimport Shop from \"./pages/shop\";\ntoast.configure()\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n       storageValue: 0, \n       web3: null, \n       accounts: null, \n       contract: null,\n       isAuthorized: false, \n       isAdmin: false,\n       isSeller: false,\n       isBuyer: false,\n       isLoading: false,\n       noWallet: false\n      };\n\n  }\n\n  componentDidMount = async () => {\n\n    if(window.ethereum) {\n      window.ethereum.on('chainChanged', () => {\n        window.location.reload();\n      })\n      window.ethereum.on('accountsChanged', () => {\n        window.location.reload();\n      })\n  }\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VintageShopContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VintageShopContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n     console.log('accounts', accounts);\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, () =>this.adminSignin());\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. please make sure that your metamask is connnected to  network  .`,\n      );\n      this.setState({\n        noWallet: true\n      });\n      console.log(\"wallet\", this.state.noWallet)\n      console.error(error);\n    }\n  };\n\n    \n\n  runExample = async () => {\n  \n    // const { accounts, contract } = this.state;\n\n    // // Stores a given value, 5 by default.\n    // await contract.methods.set(5).send({ from: accounts[0] });\n\n    // // Get the value from the contract to prove it worked.\n    // const response = await contract.methods.get().call();\n\n    // // Update state with the result.\n    // this.setState({ storageValue: response });\n    console.log('testcd')\n  };\n  accountChangeHandler = () => {\n    window.location.reload();\n  }\n\n  adminSignin = () =>{\n    // sign user in\n    const { accounts, contract } = this.state;\n    let user = contract.methods.getAdmin().call({from: accounts[0]});\n    user.then(response => {\n      //authentication is successful\n      console.log('user: ',response);\n\n      if(response && response[0] === true){\n        this.setState({isAuthorized: true});\n        localStorage.setItem('isAuthenticated', true);\n        // admin check\n        if(response[1] === true){\n          this.setState({isAdmin: true});\n          console.log('admin setter')\n        }\n        \n     \n        // this.setState({pageLoading: false});\n      }\n    }).catch(error=>{\n      this.setState({isAuthorized: false});\n      localStorage.setItem('isAuthenticated', false);\n      this.setState({pageLoading: false});\n    })   \n    \n  }\n\n  // window.ether\n  \n  render() {\n    console.log('context',this.context) \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n      // return <div>Loading Web3, accounts, and contract...</div>;\n   \n    }\n    return (\n      \n      <div className=\"App\">\n        <BrowserRouter basename=\"/blockchain-developer-bootcamp-final-project\">\n        <MyProvider>\n          <UserContext.Consumer>\n            {(context) =>\n                <Switch>\n                <Route exact path=\"/\" render={props => {return( <Home {...props} baseAppState={this.state} />  )} } />\n                <Route exact path=\"/shop\" render={props => {return( <Shop {...props} context={context} baseAppState={this.state} />  )} } />\n                </Switch>\n              \n            }\n          </UserContext.Consumer>\n        </MyProvider>\n       \n        </BrowserRouter>\n        {/* <h1>Good to Go!</h1>\n        <p>Your Truffle Box is installed and ready.</p>\n        <h2>Smart Contract Example</h2>\n        <p>\n          If your contracts compiled and migrated successfully, below will show\n          a stored value of 5 (by default).\n        </p>\n        <p>\n          Try changing the value stored on <strong>line 42</strong> of App.js.\n        </p>\n        <div>The stored value is: {this.state.storageValue}</div> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}